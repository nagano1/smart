name: ðŸŒ• CMake Build Matrix

on:
  push:
  pull_request:
  schedule:
    - cron: '15 1 1 11 *' # minute hour day month monday


jobs:
  set-matrix:
    name: test
    runs-on: ubuntu-latest
    outputs:
      something: ${{ steps.set-matrix.outputs.value }}
    steps:
      - name: make values
        id: set-matrix
        shell: bash
        run: |
          USAGE=$(cat <<-END
          [{
          "os": "windows-latest",
          "name": "windows-latest",
                "bin": "src/Release/main_run.exe",
                "testbin": "tests/Release/main_tst.exe",
                "lspbin": "lsp_vscode_server/Release/main_lsp.exe",
                "longrunning_bin": "tests/long_running/Release/main_tst_long_running.exe",
                "cmakeConfig": "-A Win32 -T v143,host=x64",
                "cmakeBuildConfig": "--config Release ",
                "prescript": "chcp 65001"
            },
            {
              "os": "ubuntu-latest",
              "name": "ubuntu-latest",
              "bin": ""./src/main_run",
              "testbin": "./tests/main_tst",
              "longrunning_bin": ""./tests/long_running/main_tst_long_running",
              "lspbin": "./lsp_vscode_server/main_lsp",
              "prescript": "cat /proc/cpuinfo; export CXX=clang++",
              "cmakeConfig": " -D NODOOR32=1 ",
              "cmakeBuildConfig": ""
            },
            {
              "os": "macos-latest",
              "name": "macos-latest",
              "bin": "./src/main_run",
              "testbin": "./tests/main_tst",
              "longrunning_bin": "./tests/long_running/main_tst_long_running",
              "lspbin": "./lsp_vscode_server/main_lsp",
              "cmakeConfig": "",
              "cmakeBuildConfig": "",
              "prescript": ""
            }]
          END
          )
          echo $USAGE
          echo "value=${USAGE}" >> $GITHUB_OUTPUT
  mybuild:
    needs: set-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: ${{fromJson(needs.set-matrix.outputs.something)}}
    steps:
      - uses: actions/checkout@v3
      - name: enable problem matcher
        run: |
          echo "::add-matcher::.github/problem_matcher.json"

      - name: cmake
        run: |
          cd build/

          ${{ matrix.config.prescript }}

          cmake -D NO_SPEED_TEST=1 ${{ matrix.config.cmakeConfig }} .. 
          cmake --build . ${{ matrix.config.cmakeBuildConfig }}
      
      - name: run test
        run: |
          cd build/

          echo ${{ matrix.config.bin }}
          ${{ matrix.config.bin }}
          
          echo ${{ matrix.config.testbin }}
          ${{ matrix.config.testbin }}
          
          # ${{ matrix.config.lspbin }}

      - name: Copy artifact
        shell: bash
        run: |
          cd build;
          mkdir -p deb/${{ matrix.config.os }};
          cp ${{ matrix.config.bin }} deb/${{ matrix.config.os }}
          cp ${{ matrix.config.testbin }} deb/${{ matrix.config.os }}
          cp ${{ matrix.config.lspbin }} deb/${{ matrix.config.os }}
          cp ${{ matrix.config.longrunning_bin }} deb/${{ matrix.config.os }}
       

      - uses: actions/upload-artifact@v3
        with:
          name: deen_actions_cmake_${{ github.sha }}_amd64
          path: build/deb
  
 


# discarded code
 
#make
#    - name: runner
#      run: |
#        bin/doorlang

#        cmake -DCMAKE_BUILD_TYPE=Release ..


          # this doesn't affect at all
          #-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_EXE_LINKER_FLAGS=-m32  -DCMAKE_C_FLAGS=-m32 -DCMAKE_MODULE_LINKER_FLAGS=-m32 -DCMAKE_STATIC_LINKER_FLAGS=-m32  -DCMAKE_SHARED_LINKER_FLAGS=-m32


          # cmake -D NO_SPEED_TEST=1 ${{ matrix.config.cmakeConfig }} .. 
          ##make all
          # cmake --build . ${{ matrix.config.cmakeBuildConfig }}
          #ls -R .
      